const DepartmentWithChildren = ({ 
  department, 
  allPositions, 
  allEmployees, 
  level = 0 
}: { 
  department: DepartmentNode, 
  allPositions: Position[], 
  allEmployees: Employee[],
  level?: number
}) => {
  // Загружаем должности для этого отдела из API
  const { data: departmentPositionsResponse } = useQuery<{status: string, data: Position[]}>({
    queryKey: [`/api/departments/${department.department_id}/positions`]
  });
  const { data: positionDepartmentsResponse } = useQuery<{status: string, data: any[]}>({
    queryKey: [`/api/position-departments`]
  });
  
  // Получаем должности для этого отдела
  // Если API вернул результат, используем его
  // Иначе используем резервную логику на основе сотрудников и позиций из department.positions
  let departmentPositions: Position[] = [];
  
  if (departmentPositionsResponse?.data && departmentPositionsResponse.data.length > 0) {
    // Используем данные из API
    departmentPositions = departmentPositionsResponse.data;
  } else {
    
    const positionDepartmentLinks = positionDepartmentsResponse?.data || [];

    // Находим ID должностей, связанных с текущим отделом через position_department
    const linkedPositionIds = positionDepartmentLinks
        .filter(link => link.department_id === department.department_id && !link.deleted)
        .map(link => link.position_id);

    // Добавляем эти должности в список
    departmentPositions = allPositions.filter(pos => {
      // Проверяем, есть ли сотрудники с этой позицией в этом отделе
      const hasEmployeesInDepartment = allEmployees.some(
          emp => emp.position_id === pos.position_id && emp.department_id === department.department_id
      );

      // Проверяем, есть ли прямая связь через position_department
      const isLinkedThroughPositionDepartment = linkedPositionIds.includes(pos.position_id);

      // Также включаем позиции, которые уже были привязаны к этому отделу через API
      const isPositionInDepartment = department.positions.some(
          deptPos => deptPos.position_id === pos.position_id
      );
      return hasEmployeesInDepartment || isPositionInDepartment || isLinkedThroughPositionDepartment;
    });
    
    // Резервная логика: используем позиции с сотрудниками в этом отделе
    // и позиции, которые уже были привязаны к этому отделу
    departmentPositions = allPositions.filter(pos => {
      // Проверяем, есть ли сотрудники с этой позицией в этом отделе
      const hasEmployeesInDepartment = allEmployees.some(
        emp => emp.position_id === pos.position_id && emp.department_id === department.department_id
      );
      
      // Также включаем позиции, которые уже были привязаны к этому отделу через API
      const isPositionInDepartment = department.positions.some(
        deptPos => deptPos.position_id === pos.position_id
      );
  
      return hasEmployeesInDepartment || isPositionInDepartment;
    });
    
    // Если у нас всё равно нет позиций, покажем все позиции в системе
    // (только для демонстрации, в реальном приложении так не делать)
    if (departmentPositions.length === 0 && level === 0) {
      departmentPositions = allPositions;
    }
  }

  // Получаем сотрудников для каждой должности
  const positionsWithEmployees = departmentPositions.map(position => {
    const positionEmployees = allEmployees.filter(
      emp => emp.position_id === position.position_id && emp.department_id === department.department_id
    );
    
    return {
      ...position,
      employees: positionEmployees
    };
  });

  // Вычисляем ширину для дочерних отделов
  const totalChildWidth = department.children.reduce((sum, child) => sum + child.width, 0);
  
  return (
    <div 
      className="department-node"
      style={{
        width: `${department.width}%`,
        minWidth: '300px',
        margin: '0 auto'
      }}
    >
      <DepartmentCard department={department} />
      
      {/* Должности в отделе */}
      <div className="position-employees-list">
        {positionsWithEmployees.map(position => (
          <PositionCard 
            key={position.position_id}
            position={position}
            employees={position.employees}
          />
        ))}
      </div>
      
      {/* Если есть дочерние отделы, рекурсивно отображаем их */}
      {department.children.length > 0 && (
        <div className="department-children">
          <div className="child-departments">
            {department.children.map(childDept => (
              <DepartmentWithChildren
                key={childDept.department_id}
                department={childDept}
                allPositions={allPositions}
                allEmployees={allEmployees}
                level={level + 1}
              />
            ))}
          </div>
        </div>
      )}
    </div>
  );
};