
  app.get('/api/positions/with-departments', async (req: Request, res: Response) => {
    try {
      const positions = await storage.getAllPositions();
      const departments = await storage.getAllDepartments();
      const positionDepartments = await storage.getAllPositionDepartments();
      const positionPositions = await storage.getAllPositionPositions();

      const positionsWithDepts = positions.map((position) => {
        const links = positionDepartments.filter(
            (pd) => pd.position_id === position.position_id,
        );

        const linkedDepartments: any[] = [];
        const seenKeys = new Set<string>();

        for (const link of links) {
          const dept = departments.find(d => d.department_id === link.department_id);
          if (!dept) continue;

          const baseDeptInfo = {
            position_link_id: link.position_link_id,
            department_id: link.department_id,
            department_name: dept.name || "Неизвестный отдел",
            sort: link.sort,
            vacancies: link.vacancies || 0,
          };

          const parentsForDept = positionPositions.filter(
              (pp) =>
                  pp.position_id === position.position_id &&
                  pp.department_id === link.department_id
          );

          if (parentsForDept.length === 0) {
            const key = `${link.position_link_id}_null_${link.department_id}`;
            if (!seenKeys.has(key)) {
              linkedDepartments.push({
                ...baseDeptInfo,
                parent_positions: [],
                parent_position: null,
                position_position_id: null,
                group_key: `null_${link.department_id}`,
              });
              seenKeys.add(key);
            }
          } else {
            for (const parentRelation of parentsForDept) {
              const parent = positions.find(p => p.position_id === parentRelation.parent_position_id);
              if (!parent) continue;

              const key = `${link.position_link_id}_${parent.position_id}_${link.department_id}`;
              if (!seenKeys.has(key)) {
                linkedDepartments.push({
                  ...baseDeptInfo,
                  parent_position: {
                    position_id: parent.position_id,
                    name: parent.name,
                  },
                  parent_positions: [{
                    position_id: parent.position_id,
                    name: parent.name,
                  }],
                  position_position_id: parentRelation.position_relation_id,
                  group_key: `${parent.position_id}_${link.department_id}`,
                });
                seenKeys.add(key);
              }
            }
          }
        }

        const parentRelations = positionPositions.filter(
            (pp) => pp.position_id === position.position_id,
        );
        const parentPositionsInfo = parentRelations.map((relation) => {
          const parentPosition = positions.find(
              (p) => p.position_id === relation.parent_position_id,
          );
          return parentPosition ? {
            position_id: parentPosition.position_id,
            name: parentPosition.name,
            department_id: relation.department_id,
          } : null;
        }).filter(Boolean);

        const childrenRelations = positionPositions.filter(
            (pp) => pp.parent_position_id === position.position_id,
        );
        const childrenPositionsInfo = childrenRelations.map((relation) => {
          const childPosition = positions.find(
              (p) => p.position_id === relation.position_id,
          );
          return childPosition ? {
            position_id: childPosition.position_id,
            name: childPosition.name,
            department_id: relation.department_id,
          } : null;
        }).filter(Boolean);

        return {
          ...position,
          departments: linkedDepartments,
          parent_positions: parentPositionsInfo,
          children_positions: childrenPositionsInfo,
          is_subordinate: parentRelations.length > 0,
        };
      });

      res.json({ status: 'success', data: positionsWithDepts });
    } catch (error) {
      console.error('Ошибка при получении должностей с отделами:', error);
      res.status(500).json({
        status: 'error',
        message: 'Ошибка сервера при получении должностей с отделами'
      });
    }
  });
