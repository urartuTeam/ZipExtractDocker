import express from 'express';
import { setupAuth } from './auth';
import { registerRoutes } from './routes';
import { setupVite, serveStatic, log } from './vite';
import session from 'express-session';
import path from 'path';

const app = express();
app.use(express.json());

// Middleware для логирования API запросов
app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }

      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "…";
      }

      log(logLine);
    }
  });

  next();
});

// Самозапускающаяся асинхронная функция для инициализации сервера
(async () => {
  // Настройка сессий и аутентификации
  setupAuth(app);

  // Регистрация API маршрутов
  const server = await registerRoutes(app);

  // Обработка ошибок для API
  app.use((err: any, _req: express.Request, res: express.Response, _next: express.NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    console.error(err.stack);
    res.status(status).json({ status: 'error', message });
  });

  // В режиме разработки используем Vite, в продакшн - статические файлы
  if (process.env.NODE_ENV === 'development') {
    await setupVite(app, server);
    log('Starting Vite development server...');
  } else {
    // В продакшн используем статические файлы
    serveStatic(app);
    log('Serving static files in production mode');
  }

  // ВАЖНО: Запускаем сервер только один раз
  const PORT = process.env.PORT || 5000;
  server.listen(PORT, '0.0.0.0', () => {
    log(`serving on port ${PORT}`);
  });
})();